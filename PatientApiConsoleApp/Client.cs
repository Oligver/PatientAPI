using System.Text;

namespace PatientApiConsoleApp
{
	//----------------------
	// <auto-generated>
	//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
	// </auto-generated>
	//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

	namespace PatientApiConsoleApp
	{
		using System = System;

		[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
		public partial class Client
		{
#pragma warning disable 8618
			private string _baseUrl;
#pragma warning restore 8618

			private HttpClient _httpClient;
			private static Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
			private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
			public Client(string baseUrl, HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
			{
				BaseUrl = baseUrl;
				_httpClient = httpClient;
				Initialize();
			}

			private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
			{
				var settings = new Newtonsoft.Json.JsonSerializerSettings();
				UpdateJsonSerializerSettings(settings);
				return settings;
			}

			public string BaseUrl
			{
				get { return _baseUrl; }
				set
				{
					_baseUrl = value;
					if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
						_baseUrl += '/';
				}
			}

			protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

			static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

			partial void Initialize();

			partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
			partial void PrepareRequest(HttpClient client, HttpRequestMessage request, StringBuilder urlBuilder);
			partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

			/// <summary>
			/// Get all patients
			/// </summary>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual Task<ICollection<Patient>> PatientAllAsync()
			{
				return PatientAllAsync(CancellationToken.None);
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <summary>
			/// Get all patients
			/// </summary>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async Task<ICollection<Patient>> PatientAllAsync(CancellationToken cancellationToken)
			{
				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using (var request_ = new HttpRequestMessage())
					{
						request_.Method = new HttpMethod("GET");
						request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

						var urlBuilder_ = new StringBuilder();
						if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
						// Operation Path: "Patient"
						urlBuilder_.Append("Patient");

						PrepareRequest(client_, request_, urlBuilder_);

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

						PrepareRequest(client_, request_, url_);

						var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
						var disposeResponse_ = true;
						try
						{
							var headers_ = new Dictionary<string, IEnumerable<string>>();
							foreach (var item_ in response_.Headers)
								headers_[item_.Key] = item_.Value;
							if (response_.Content != null && response_.Content.Headers != null)
							{
								foreach (var item_ in response_.Content.Headers)
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse(client_, response_);

							var status_ = (int)response_.StatusCode;
							if (status_ == 500)
							{
								string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
								throw new ApiException("Server Error", status_, responseText_, headers_, null);
							}
							else
							if (status_ == 200)
							{
								var objectResponse_ = await ReadObjectResponseAsync<ICollection<Patient>>(response_, headers_, cancellationToken).ConfigureAwait(false);
								if (objectResponse_.Object == null)
								{
									throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
								}
								return objectResponse_.Object;
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
								throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
							}
						}
						finally
						{
							if (disposeResponse_)
								response_.Dispose();
						}
					}
				}
				finally
				{
					if (disposeClient_)
						client_.Dispose();
				}
			}

			/// <summary>
			/// Add patient
			/// </summary>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual Task CreatePatient(Patient body)
			{
				return PatientPOSTAsync(body, CancellationToken.None);
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <summary>
			/// Add patient
			/// </summary>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async Task PatientPOSTAsync(Patient body, CancellationToken cancellationToken)
			{
				if (body == null)
					throw new ArgumentNullException("body");

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using (var request_ = new HttpRequestMessage())
					{
						var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
						var content_ = new StringContent(json_);
						content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
						request_.Content = content_;
						request_.Method = new HttpMethod("POST");

						var urlBuilder_ = new StringBuilder();
						if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
						// Operation Path: "Patient"
						urlBuilder_.Append("Patient");

						PrepareRequest(client_, request_, urlBuilder_);

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

						PrepareRequest(client_, request_, url_);

						var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
						var disposeResponse_ = true;
						try
						{
							var headers_ = new Dictionary<string, IEnumerable<string>>();
							foreach (var item_ in response_.Headers)
								headers_[item_.Key] = item_.Value;
							if (response_.Content != null && response_.Content.Headers != null)
							{
								foreach (var item_ in response_.Content.Headers)
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse(client_, response_);

							var status_ = (int)response_.StatusCode;
							if (status_ == 500)
							{
								string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
								throw new ApiException("Server Error", status_, responseText_, headers_, null);
							}
							else
							if (status_ == 200)
							{
								return;
							}
							else
							if (status_ == 400)
							{
								var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
								if (objectResponse_.Object == null)
								{
									throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
								}
								throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
								throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
							}
						}
						finally
						{
							if (disposeResponse_)
								response_.Dispose();
						}
					}
				}
				finally
				{
					if (disposeClient_)
						client_.Dispose();
				}
			}

			/// <summary>
			/// Get all patients
			/// </summary>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual Task<ICollection<Patient>> PatientAll2Async(string searchPattern)
			{
				return PatientAll2Async(searchPattern, CancellationToken.None);
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <summary>
			/// Get all patients
			/// </summary>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async Task<ICollection<Patient>> PatientAll2Async(string searchPattern, CancellationToken cancellationToken)
			{
				if (searchPattern == null)
					throw new ArgumentNullException("searchPattern");

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using (var request_ = new HttpRequestMessage())
					{
						request_.Method = new HttpMethod("GET");
						request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

						var urlBuilder_ = new StringBuilder();
						if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
						// Operation Path: "Patient/birthDate={searchPattern}"
						urlBuilder_.Append("Patient/birthDate=");
						urlBuilder_.Append(Uri.EscapeDataString(ConvertToString(searchPattern, System.Globalization.CultureInfo.InvariantCulture)));

						PrepareRequest(client_, request_, urlBuilder_);

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

						PrepareRequest(client_, request_, url_);

						var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
						var disposeResponse_ = true;
						try
						{
							var headers_ = new Dictionary<string, IEnumerable<string>>();
							foreach (var item_ in response_.Headers)
								headers_[item_.Key] = item_.Value;
							if (response_.Content != null && response_.Content.Headers != null)
							{
								foreach (var item_ in response_.Content.Headers)
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse(client_, response_);

							var status_ = (int)response_.StatusCode;
							if (status_ == 500)
							{
								string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
								throw new ApiException("Server Error", status_, responseText_, headers_, null);
							}
							else
							if (status_ == 200)
							{
								var objectResponse_ = await ReadObjectResponseAsync<ICollection<Patient>>(response_, headers_, cancellationToken).ConfigureAwait(false);
								if (objectResponse_.Object == null)
								{
									throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
								}
								return objectResponse_.Object;
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
								throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
							}
						}
						finally
						{
							if (disposeResponse_)
								response_.Dispose();
						}
					}
				}
				finally
				{
					if (disposeClient_)
						client_.Dispose();
				}
			}

			/// <summary>
			/// Update patient
			/// </summary>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual Task PatientPUTAsync(Guid id, Patient body)
			{
				return PatientPUTAsync(id, body, CancellationToken.None);
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <summary>
			/// Update patient
			/// </summary>
			/// <returns>Success</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async Task PatientPUTAsync(Guid id, Patient body, CancellationToken cancellationToken)
			{
				if (id == null)
					throw new ArgumentNullException("id");

				if (body == null)
					throw new ArgumentNullException("body");

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using (var request_ = new HttpRequestMessage())
					{
						var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
						var content_ = new StringContent(json_);
						content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
						request_.Content = content_;
						request_.Method = new HttpMethod("PUT");

						var urlBuilder_ = new StringBuilder();
						if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
						// Operation Path: "Patient/{id}"
						urlBuilder_.Append("Patient/");
						urlBuilder_.Append(Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

						PrepareRequest(client_, request_, urlBuilder_);

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

						PrepareRequest(client_, request_, url_);

						var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
						var disposeResponse_ = true;
						try
						{
							var headers_ = new Dictionary<string, IEnumerable<string>>();
							foreach (var item_ in response_.Headers)
								headers_[item_.Key] = item_.Value;
							if (response_.Content != null && response_.Content.Headers != null)
							{
								foreach (var item_ in response_.Content.Headers)
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse(client_, response_);

							var status_ = (int)response_.StatusCode;
							if (status_ == 500)
							{
								string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
								throw new ApiException("Server Error", status_, responseText_, headers_, null);
							}
							else
							if (status_ == 200)
							{
								return;
							}
							else
							if (status_ == 404)
							{
								var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
								if (objectResponse_.Object == null)
								{
									throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
								}
								throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
								throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
							}
						}
						finally
						{
							if (disposeResponse_)
								response_.Dispose();
						}
					}
				}
				finally
				{
					if (disposeClient_)
						client_.Dispose();
				}
			}

			/// <summary>
			/// Delete patient
			/// </summary>
			/// <returns>No Content</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual Task PatientDELETEAsync(Guid id)
			{
				return PatientDELETEAsync(id, CancellationToken.None);
			}

			/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
			/// <summary>
			/// Delete patient
			/// </summary>
			/// <returns>No Content</returns>
			/// <exception cref="ApiException">A server side error occurred.</exception>
			public virtual async Task PatientDELETEAsync(Guid id, CancellationToken cancellationToken)
			{
				if (id == null)
					throw new ArgumentNullException("id");

				var client_ = _httpClient;
				var disposeClient_ = false;
				try
				{
					using (var request_ = new HttpRequestMessage())
					{
						request_.Method = new HttpMethod("DELETE");

						var urlBuilder_ = new StringBuilder();
						if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
						// Operation Path: "Patient/{id}"
						urlBuilder_.Append("Patient/");
						urlBuilder_.Append(Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

						PrepareRequest(client_, request_, urlBuilder_);

						var url_ = urlBuilder_.ToString();
						request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

						PrepareRequest(client_, request_, url_);

						var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
						var disposeResponse_ = true;
						try
						{
							var headers_ = new Dictionary<string, IEnumerable<string>>();
							foreach (var item_ in response_.Headers)
								headers_[item_.Key] = item_.Value;
							if (response_.Content != null && response_.Content.Headers != null)
							{
								foreach (var item_ in response_.Content.Headers)
									headers_[item_.Key] = item_.Value;
							}

							ProcessResponse(client_, response_);

							var status_ = (int)response_.StatusCode;
							if (status_ == 500)
							{
								string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
								throw new ApiException("Server Error", status_, responseText_, headers_, null);
							}
							else
							if (status_ == 204)
							{
								return;
							}
							else
							if (status_ == 404)
							{
								var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
								if (objectResponse_.Object == null)
								{
									throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
								}
								throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
							}
							else
							{
								var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
								throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
							}
						}
						finally
						{
							if (disposeResponse_)
								response_.Dispose();
						}
					}
				}
				finally
				{
					if (disposeClient_)
						client_.Dispose();
				}
			}

			protected struct ObjectResponseResult<T>
			{
				public ObjectResponseResult(T responseObject, string responseText)
				{
					Object = responseObject;
					Text = responseText;
				}

				public T Object { get; }

				public string Text { get; }
			}

			public bool ReadResponseAsString { get; set; }

			protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
			{
				if (response == null || response.Content == null)
				{
					return new ObjectResponseResult<T>(default(T), string.Empty);
				}

				if (ReadResponseAsString)
				{
					var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
					try
					{
						var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
						return new ObjectResponseResult<T>(typedBody, responseText);
					}
					catch (Newtonsoft.Json.JsonException exception)
					{
						var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
						throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
					}
				}
				else
				{
					try
					{
						using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
						using (var streamReader = new StreamReader(responseStream))
						using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
						{
							var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
							var typedBody = serializer.Deserialize<T>(jsonTextReader);
							return new ObjectResponseResult<T>(typedBody, string.Empty);
						}
					}
					catch (Newtonsoft.Json.JsonException exception)
					{
						var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
						throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
					}
				}
			}

			private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
			{
				if (value == null)
				{
					return "";
				}

				if (value is Enum)
				{
					var name = Enum.GetName(value.GetType(), value);
					if (name != null)
					{
						var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
						if (field != null)
						{
							var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
								as System.Runtime.Serialization.EnumMemberAttribute;
							if (attribute != null)
							{
								return attribute.Value != null ? attribute.Value : name;
							}
						}

						var converted = Convert.ToString(Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()), cultureInfo));
						return converted == null ? string.Empty : converted;
					}
				}
				else if (value is bool)
				{
					return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
				}
				else if (value is byte[])
				{
					return Convert.ToBase64String((byte[])value);
				}
				else if (value is string[])
				{
					return string.Join(",", (string[])value);
				}
				else if (value.GetType().IsArray)
				{
					var valueArray = (Array)value;
					var valueTextArray = new string[valueArray.Length];
					for (var i = 0; i < valueArray.Length; i++)
					{
						valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
					}
					return string.Join(",", valueTextArray);
				}

				var result = Convert.ToString(value, cultureInfo);
				return result == null ? "" : result;
			}
		}

		[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
		public partial class Patient
		{
			[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
			public PatientName Name { get; set; }

			/// <summary>
			/// Gender
			/// </summary>
			[Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
			public string Gender { get; set; }

			/// <summary>
			/// BirthDate
			/// </summary>
			[Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
			public DateTime BirthDate { get; set; }

			/// <summary>
			/// Active
			/// </summary>
			[Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
			public bool Active { get; set; }

		}

		/// <summary>
		/// Additional information about patient name
		/// </summary>
		[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
		public partial class PatientName
		{
			[Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
			public Guid Id { get; set; }

			/// <summary>
			/// Use
			/// </summary>
			[Newtonsoft.Json.JsonProperty("use", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
			public string Use { get; set; }

			/// <summary>
			/// Family
			/// </summary>
			[Newtonsoft.Json.JsonProperty("family", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
			public string Family { get; set; }

			/// <summary>
			/// Given
			/// </summary>
			[Newtonsoft.Json.JsonProperty("given", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
			public ICollection<string> Given { get; set; }

		}

		[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
		public partial class ProblemDetails
		{
			[Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
			public string Type { get; set; }

			[Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
			public string Title { get; set; }

			[Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
			public int? Status { get; set; }

			[Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
			public string Detail { get; set; }

			[Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
			public string Instance { get; set; }

			private IDictionary<string, object> _additionalProperties;

			[Newtonsoft.Json.JsonExtensionData]
			public IDictionary<string, object> AdditionalProperties
			{
				get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
				set { _additionalProperties = value; }
			}

		}



		[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
		public partial class ApiException : Exception
		{
			public int StatusCode { get; private set; }

			public string Response { get; private set; }

			public IReadOnlyDictionary<string, IEnumerable<string>> Headers { get; private set; }

			public ApiException(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, Exception innerException)
				: base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
			{
				StatusCode = statusCode;
				Response = response;
				Headers = headers;
			}

			public override string ToString()
			{
				return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
			}
		}

		[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
		public partial class ApiException<TResult> : ApiException
		{
			public TResult Result { get; private set; }

			public ApiException(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, TResult result, Exception innerException)
				: base(message, statusCode, response, headers, innerException)
			{
				Result = result;
			}
		}

	}

#pragma warning restore 108
#pragma warning restore 114
#pragma warning restore 472
#pragma warning restore 612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
}
